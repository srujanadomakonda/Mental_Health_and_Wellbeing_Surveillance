#include "DHT.h"
#include "DHT.h"
#include "MQ135.h"
#include <math.h>
#include <SoftwareSerial.h> //instead of parenthesis () put angle bracket as YouTube description does not allow angle bracket 
#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most accurate BPM math.
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   
#define DHTPIN 2
#define DHTTYPE DHT11 // DHT 11
#define RLOAD 22.0
const int PulseWire = 4;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
const int x_out = A3; /* connect x_out of module to A1 of UNO board */
const int y_out = A2; /* connect y_out of module to A2 of UNO board */
const int z_out = A1; /* connect z_out of module to A3 of UNO board */
int Threshold = 550;           // Determine which Signal to "count as a beat" and which to ignore.
MQ135 gasSensor = MQ135(A0);
int val;
int sensorPin = A0;
int sensorValue = 0;
int sound_sense = A5; // for arduino uno
int sound_value;
SoftwareSerial espSerial(5, 6);

DHT dht(DHTPIN, DHTTYPE);
//Declare Sensor
struct ardData
{
  float h;
  float t;
  float myBPM;
  float x_adc_value;
  float y_adc_value;
  float z_adc_value;
  float ppm;
  float db;
} ardData;

bool pulseMode = true;  // Control flag for switching modes
PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"

void setup()
{
  Serial.begin(115200);
  espSerial.begin(115200);
  Serial.println("Mental Health and Wellbeing Surveillance tracking system!!");
  dht.begin();
  pinMode(sensorPin, INPUT);
  pulseSensor.analogInput(PulseWire);   
  pulseSensor.setThreshold(Threshold);   

  // Double-check the "pulseSensor" object was created and "began" seeing a signal. 
  if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  // This prints one time at Arduino power-up,  or on Arduino reset.  
  }
  delay(2000);
}

void loop()
{
  if (pulseMode) {
    // Pulse sensor working
    if (pulseSensor.sawStartOfBeat() ) {  // Constantly test to see if a beat happened".
      ardData.myBPM = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as an "int".
      Serial.println("â™¥  A HeartBeat Happened ! "); // If test is "true", print a message "a heartbeat happened".
      Serial.print("BPM: ");                        // Print phrase "BPM: " 
      Serial.println(ardData.myBPM);                // Print the value inside of myBPM. 
    }
  } else {
    // Other sensors working
    ardData.h = dht.readHumidity();
    ardData.t = dht.readTemperature();
    if (isnan(ardData.h) || isnan(ardData.t)) {
      Serial.println("Failed DHT");
      return;
    }
    Serial.print("Humidity: ");
    Serial.print(ardData.h); 
    Serial.print("%\t ");
    Serial.print(" Temperature: ");
    Serial.print(ardData.t); 
    Serial.println(" *C");

    ardData.x_adc_value = analogRead(x_out); // Digital value of voltage on x_out pin 
    ardData.y_adc_value = analogRead(y_out); // Digital value of voltage on y_out pin 
    ardData.z_adc_value = analogRead(z_out); // Digital value of voltage on z_out pin 

    Serial.print("Accelerometer Value: ");
    Serial.print("x = ");
    Serial.println(ardData.x_adc_value);
    Serial.print("y = ");
    Serial.println(ardData.y_adc_value);
    Serial.print("z = ");
    Serial.println(ardData.z_adc_value);

    val = analogRead(A0);
    ardData.ppm = gasSensor.getPPM();
    Serial.print("ppm: ");
    Serial.println(ardData.ppm);

    sound_value = analogRead(sound_sense);
    ardData.db = map(sound_value, 0, 1023, 20, 90);
    Serial.print("Loudness: ");
    Serial.println(ardData.db);
  }

  espSerial.write((uint8_t*)&ardData, sizeof(ardData));
  
  // Switch between pulse sensor and other sensors
  pulseMode = !pulseMode;
  
  delay(1000);
}
